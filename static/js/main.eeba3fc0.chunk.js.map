{"version":3,"sources":["components/Loader.js","components/ConfirmProviderModal.js","components/EditProviderModal.js","components/SingleProvider.js","components/ProviderList.js","helpers/utils.js","components/AddNewClient.js","components/SingleClient.js","components/DeleteClientModal.js","components/EditClient.js","components/Search.js","helpers/request.js","components/ClientsList.js","images/error.jpeg","components/NotFound.js","App.js","index.js"],"names":["Loader","className","ConfirmProviderModal","handleClose","deleteProvider","id","Modal","size","centered","show","onHide","Header","closeButton","Title","Footer","Button","variant","onClick","EditProviderModal","provider","saveEditedProvider","useState","editedProvider","setEditedProvider","style","color","Body","value","name","onChange","e","target","SingleProvider","state","showConfirm","showEdit","checked","openConfirmModal","setState","openEditModal","handleCheck","props","onCheck","_id","this","singleClientProviders","selectedProviders","length","map","el","Col","sm","Form","Check","type","label","defaultChecked","includes","icon","faEdit","faTrash","PureComponent","ProviderList","providers","providersList","isProviderExist","data","arr","some","checkData","email","phone","object","errors","test","validateName","validateEmail","AddNewClient","providerInput","handleClick","addNewProvider","handleChange","input","onClose","handleChangeNewClientInfo","handleNewClientInfo","Group","as","Row","controlId","Label","column","Control","disabled","SingleClient","newClient","showEditModal","clientProvidersList","join","DeleteClientModal","confirmDelete","closeModals","EditClient","client","showDeleteModal","Set","has","delete","add","handleNewProvider","event","deleteClient","saveChanges","clients","Object","values","saveEditedClient","sortOptions","Search","sort","setSort","search","setSearch","Navbar","expand","Brand","Nav","NavDropdown","title","item","index","Item","active","inline","FormControl","placeholder","getClients","request","url","method","body","config","headers","JSON","stringify","fetch","then","res","json","response","error","apiUrl","process","ClientsList","newClientModal","editClientModal","editClient","spinner","getProviders","catch","console","query","key","log","toggleAddNewClientModal","toggleEditClientModal","makeSpinnerWork","addProvider","newProvider","newProviders","findIndex","editedClient","newClients","filter","newClientList","clientList","Table","bordered","hover","responsive","NotFound","to","src","cursor","alt","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eeba3fc0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"lds-ellipsis\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import { Button, Modal } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ConfirmProviderModal({ handleClose, deleteProvider, id }) {\r\n  return (\r\n    <>\r\n      <Modal size=\"sm\" centered show={true} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Are you sure to remove?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={() => deleteProvider(id)}>\r\n            Remove\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nConfirmProviderModal.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  deleteProvider: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ConfirmProviderModal;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction EditProviderModal({ handleClose, provider, saveEditedProvider }) {\r\n  const [editedProvider, setEditedProvider] = useState(provider);\r\n  const saveChanges = () => {\r\n    if (!editedProvider) {\r\n      return;\r\n    }\r\n    saveEditedProvider(editedProvider);\r\n    handleClose();\r\n  };\r\n  const handleChange = (e) => [\r\n    setEditedProvider({\r\n      ...editedProvider,\r\n      name: e.target.value,\r\n    }),\r\n  ];\r\n  return (\r\n    <>\r\n      <Modal size=\"sm\" show={true} centered>\r\n        <Modal.Header>\r\n          <Modal.Title style={{ color: \"#17a2b8\" }}>Edit Provider</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <input value={editedProvider.name} onChange={handleChange} />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={saveChanges}>\r\n            Save Changes\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nEditProviderModal.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  provider: PropTypes.object.isRequired,\r\n  saveEditedProvider: PropTypes.func.isRequired,\r\n};\r\nexport default EditProviderModal;\r\n","import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Form, Col, Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport ConfirmProviderModal from \"./ConfirmProviderModal\";\r\nimport EditProviderModal from \"./EditProviderModal\";\r\n\r\nclass SingleProvider extends PureComponent {\r\n  state = {\r\n    showConfirm: false,\r\n    showEdit: false,\r\n    checked: false,\r\n  };\r\n  openConfirmModal = () => {\r\n    this.setState({\r\n      showConfirm: !this.state.showConfirm,\r\n    });\r\n  };\r\n  openEditModal = () => {\r\n    this.setState({\r\n      showEdit: !this.state.showEdit,\r\n    });\r\n  };\r\n  handleCheck = () => {\r\n    const { onCheck, provider } = this.props;\r\n    this.setState({\r\n      checked: !this.state.checked,\r\n    });\r\n    onCheck(provider._id);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      provider,\r\n      deleteProvider,\r\n      saveEditedProvider,\r\n      singleClientProviders,\r\n    } = this.props;\r\n\r\n    const { showConfirm, showEdit } = this.state;\r\n    let selectedProviders = [];\r\n    if (singleClientProviders && singleClientProviders.length > 0) {\r\n      selectedProviders = singleClientProviders.map((el) => el._id);\r\n    }\r\n    return (\r\n      <div className=\"providerList\">\r\n        <Col sm={6}>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label={provider.name}\r\n            defaultChecked={\r\n              selectedProviders && selectedProviders.includes(provider._id)\r\n            }\r\n            onClick={this.handleCheck}\r\n          />\r\n        </Col>\r\n        <Col sm={2}>\r\n          <Button variant=\"custom\" onClick={this.openEditModal}>\r\n            <FontAwesomeIcon icon={faEdit} style={{ color: \"#17a2b8\" }} />\r\n          </Button>\r\n        </Col>\r\n        <Col sm={1}>\r\n          <Button variant=\"custom\" onClick={this.openConfirmModal}>\r\n            <FontAwesomeIcon icon={faTrash} style={{ color: \"#d11a2a\" }} />\r\n          </Button>\r\n        </Col>\r\n        {showEdit && (\r\n          <EditProviderModal\r\n            handleClose={this.openEditModal}\r\n            provider={provider}\r\n            saveEditedProvider={saveEditedProvider}\r\n          />\r\n        )}\r\n        {showConfirm && (\r\n          <ConfirmProviderModal\r\n            handleClose={this.openConfirmModal}\r\n            deleteProvider={deleteProvider}\r\n            id={provider._id}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSingleProvider.propTypes = {\r\n  provider: PropTypes.object.isRequired,\r\n  deleteProvider: PropTypes.func.isRequired,\r\n  saveEditedProvider: PropTypes.func.isRequired,\r\n  onCheck: PropTypes.func,\r\n  singleClientProviders: PropTypes.array,\r\n};\r\n\r\nexport default SingleProvider;\r\n","import React from \"react\";\r\nimport SingleProvider from \"./SingleProvider\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ProviderList({\r\n  providers,\r\n  deleteProvider,\r\n  saveEditedProvider,\r\n  onCheck,\r\n  singleClientProviders,\r\n}) {\r\n  const providersList = providers.map((el) => {\r\n    return (\r\n      <SingleProvider\r\n        key={el._id}\r\n        provider={el}\r\n        deleteProvider={deleteProvider}\r\n        saveEditedProvider={saveEditedProvider}\r\n        onCheck={onCheck}\r\n        singleClientProviders={singleClientProviders}\r\n      />\r\n    );\r\n  });\r\n  return <div>{providersList}</div>;\r\n}\r\n\r\nProviderList.propTypes = {\r\n  providers: PropTypes.array.isRequired,\r\n  deleteProvider: PropTypes.func.isRequired,\r\n  saveEditedProvider: PropTypes.func.isRequired,\r\n  onCheck: PropTypes.func,\r\n  singleClientProviders: PropTypes.array,\r\n};\r\n\r\nexport default ProviderList;\r\n","export const upper = (lower) => {\r\n  return lower.charAt(0).toUpperCase() + lower.substring(1);\r\n};\r\n\r\nconst validateEmail = (email) => {\r\n  //eslint-disable-next-line\r\n  let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n  return reg.test(email);\r\n};\r\n\r\nconst validatePhone = (num) => {\r\n  let reg = /\\d/g;\r\n  return reg.test(num);\r\n};\r\n\r\nconst validateName = (name) => {\r\n  let reg = /^[\\w'\\-,.][^0-9_!¡?÷?¿/\\\\+=@#$%ˆ&*(){}|~<>;:[\\]]{2,}$/;\r\n  return reg.test(name);\r\n};\r\n\r\nexport const isInObject = (data, object) => {\r\n  return Object.values(object).includes(data);\r\n};\r\n\r\nexport const isEmailExist = (data, arr) => {\r\n  return arr.some((el) => el.email === data);\r\n};\r\n\r\nexport const isProviderExist = (data, arr) => {\r\n  return arr.some((el) => el.name === data);\r\n};\r\n\r\nexport const checkData = (name, email, phone, object) => {\r\n  const errors = {};\r\n  if (name === \"\") {\r\n    errors.name = \"*is required\";\r\n  } else if (!validateName(name)) {\r\n    errors.name = \"*invalid\";\r\n  }\r\n  if (email === \"\") {\r\n    errors.email = \"*is required\";\r\n  } else if (!validateEmail(email)) {\r\n    errors.email = \"*invalid\";\r\n  } else if (isEmailExist(email, object)) {\r\n    errors.email = \"*email exists\";\r\n  }\r\n  if (phone === \"\") {\r\n    errors.phone = \"*is required\";\r\n  } else if (!validatePhone(phone)) {\r\n    errors.phone = \"*invalid\";\r\n  }\r\n  return errors;\r\n};\r\n","import React, { PureComponent } from \"react\";\r\nimport { Button, Modal, Form, Row, Col } from \"react-bootstrap\";\r\nimport ProviderList from \"./ProviderList\";\r\nimport PropTypes from \"prop-types\";\r\nimport { isProviderExist } from \"./../helpers/utils\";\r\n\r\nclass AddNewClient extends PureComponent {\r\n  state = {\r\n    providerInput: \"\",\r\n  };\r\n  handleClick = () => {\r\n    const { providerInput } = this.state;\r\n    if (providerInput !== \"\") {\r\n      if (isProviderExist(providerInput, this.props.providers)) {\r\n        this.setState({\r\n          providerInput: \"*provider already exists\",\r\n        });\r\n      } else {\r\n        this.props.addNewProvider(providerInput);\r\n        this.setState({\r\n          providerInput: \"\",\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        providerInput: \"*name is required\",\r\n      });\r\n    }\r\n  };\r\n  handleChange = (e) => {\r\n    const input = e.target.value;\r\n    this.setState({\r\n      providerInput: input,\r\n    });\r\n  };\r\n  render() {\r\n    const {\r\n      onClose,\r\n      providers,\r\n      deleteProvider,\r\n      saveEditedProvider,\r\n      handleChangeNewClientInfo,\r\n      onCheck,\r\n      selectedProviders,\r\n      handleNewClientInfo,\r\n      errors,\r\n    } = this.props;\r\n    const { providerInput } = this.state;\r\n    return (\r\n      <Modal show={true} centered>\r\n        <Modal.Header>\r\n          <Modal.Title style={{ color: \"#17a2b8\" }}>New Client</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n              <Form.Label column sm={2}>\r\n                Name:\r\n                {!!errors && errors.name && (\r\n                  <span className=\"errors\"> {errors.name} </span>\r\n                )}\r\n              </Form.Label>\r\n              <Col sm={10}>\r\n                <Form.Control\r\n                  type=\"name\"\r\n                  name=\"name\"\r\n                  onChange={handleChangeNewClientInfo}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n              <Form.Label column sm={2}>\r\n                Email:\r\n                {!!errors && errors.email && (\r\n                  <span className=\"errors\"> {errors.email} </span>\r\n                )}\r\n              </Form.Label>\r\n              <Col sm={10}>\r\n                <Form.Control\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  onChange={handleChangeNewClientInfo}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formHorizontalPhone\">\r\n              <Form.Label column sm={2}>\r\n                Phone:\r\n                {!!errors && errors.phone && (\r\n                  <span className=\"errors\"> {errors.phone} </span>\r\n                )}\r\n              </Form.Label>\r\n              <Col sm={10}>\r\n                <Form.Control\r\n                  type=\"phone\"\r\n                  name=\"phone\"\r\n                  onChange={handleChangeNewClientInfo}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formHorizontalProviders\">\r\n              <Form.Label column sm={2}>\r\n                Providers:\r\n              </Form.Label>\r\n              <Col sm={6}>\r\n                <Form.Control\r\n                  type=\"providers\"\r\n                  value={providerInput}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Col>\r\n              <Col sm={4}>\r\n                <Button\r\n                  variant=\"light\"\r\n                  onClick={this.handleClick}\r\n                  disabled={selectedProviders.size > 0 ? true : false}>\r\n                  Add Provider\r\n                </Button>\r\n              </Col>\r\n            </Form.Group>\r\n            <fieldset>\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={2}></Form.Label>\r\n                <Col sm={8}>\r\n                  <ProviderList\r\n                    providers={providers}\r\n                    deleteProvider={deleteProvider}\r\n                    saveEditedProvider={saveEditedProvider}\r\n                    onCheck={onCheck}\r\n                    selectedProviders={selectedProviders}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n            </fieldset>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"light\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"info\" onClick={handleNewClientInfo}>\r\n            Add Client\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nAddNewClient.propTypes = {\r\n  providers: PropTypes.array.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  addNewProvider: PropTypes.func.isRequired,\r\n  deleteProvider: PropTypes.func.isRequired,\r\n  saveEditedProvider: PropTypes.func.isRequired,\r\n  handleNewClientInfo: PropTypes.func.isRequired,\r\n  handleChangeNewClientInfo: PropTypes.func.isRequired,\r\n  onCheck: PropTypes.func.isRequired,\r\n  selectedProviders: PropTypes.object,\r\n  errors: PropTypes.object,\r\n};\r\n\r\nexport default AddNewClient;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction SingleClient({ newClient, showEditModal }) {\r\n  let clientProvidersList = \" \";\r\n  if (newClient.providers.length > 0) {\r\n    clientProvidersList = newClient.providers.map((el) => el.name).join(\", \");\r\n  }\r\n  return (\r\n    <tr>\r\n      <td>{newClient.name}</td>\r\n      <td>{newClient.email}</td>\r\n      <td>{newClient.phone}</td>\r\n      <td>{clientProvidersList}</td>\r\n      <td>\r\n        <Button variant=\"link\" onClick={() => showEditModal(newClient)}>\r\n          Edit\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nSingleClient.propTypes = {\r\n  newClient: PropTypes.object.isRequired,\r\n  showEditModal: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SingleClient;\r\n","import React from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction DeleteClientModal({ confirmDelete, closeModals }) {\r\n  return (\r\n    <>\r\n      <Modal size=\"sm\" centered show={true} onHide={confirmDelete}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Delete this client?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={closeModals}>\r\n            Delete\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={confirmDelete}>\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nDeleteClientModal.propTypes = {\r\n  confirmDelete: PropTypes.func.isRequired,\r\n  closeModals: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default DeleteClientModal;\r\n","import React, { PureComponent } from \"react\";\r\nimport { Button, Modal, Form, Row, Col } from \"react-bootstrap\";\r\nimport ProviderList from \"./ProviderList\";\r\nimport PropTypes from \"prop-types\";\r\nimport DeleteClientModal from \"./DeleteClientModal\";\r\nimport { isProviderExist, checkData } from \"./../helpers/utils\";\r\n\r\nclass EditClient extends PureComponent {\r\n  state = {\r\n    ...this.props.client,\r\n    showDeleteModal: false,\r\n    providerInput: \"\",\r\n    selectedProviders: new Set(this.props.client.providers.map((el) => el._id)),\r\n    errors: null,\r\n  };\r\n\r\n  handleCheck = (id) => {\r\n    const selectedProviders = new Set(this.state.selectedProviders);\r\n    if (selectedProviders.has(id)) {\r\n      selectedProviders.delete(id);\r\n    } else {\r\n      selectedProviders.add(id);\r\n    }\r\n    this.setState({\r\n      selectedProviders: new Set(selectedProviders),\r\n    });\r\n  };\r\n\r\n  handleNewProvider = () => {\r\n    const { providerInput } = this.state;\r\n    if (providerInput !== \"\") {\r\n      if (isProviderExist(providerInput, this.props.providers)) {\r\n        this.setState({\r\n          providerInput: \"*provider already exists\",\r\n        });\r\n      } else {\r\n        this.props.addNewProvider(providerInput);\r\n        this.setState({\r\n          providerInput: \"\",\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        providerInput: \"*name is required\",\r\n      });\r\n    }\r\n  };\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  confirmDelete = () => {\r\n    this.setState({\r\n      showDeleteModal: !this.state.showDeleteModal,\r\n    });\r\n  };\r\n  closeModals = () => {\r\n    this.props.deleteClient(this.state._id);\r\n    this.props.onClose(null);\r\n  };\r\n  saveChanges = () => {\r\n    const { _id, name, email, phone, selectedProviders } = this.state;\r\n    const client = {\r\n      _id,\r\n      name,\r\n      email,\r\n      phone,\r\n      providers: [...selectedProviders],\r\n    };\r\n\r\n    let errors = checkData(\r\n      client.name,\r\n      client.email,\r\n      client.phone,\r\n      this.props.clients\r\n    );\r\n\r\n    if (Object.values(errors).length > 0) {\r\n      if (this.state.email === this.props.client.email) {\r\n        delete errors.email;\r\n        this.setState({\r\n          errors,\r\n        });\r\n      }\r\n    }\r\n    if (Object.values(errors).length === 0) {\r\n      this.props.saveEditedClient(client);\r\n      this.props.onClose(null);\r\n    }\r\n  };\r\n  render() {\r\n    const { onClose, providers, deleteProvider, saveEditedProvider } =\r\n      this.props;\r\n    const { name, email, phone, providerInput, showDeleteModal, errors } =\r\n      this.state;\r\n\r\n    return (\r\n      <>\r\n        <Modal show={true} centered>\r\n          <Modal.Header>\r\n            <Modal.Title style={{ color: \"#17a2b8\" }}>Edit Client</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                <Form.Label column sm={2}>\r\n                  Name:\r\n                  {!!errors && errors.name && (\r\n                    <span className=\"errors\"> {errors.name} </span>\r\n                  )}\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                  <Form.Control\r\n                    type=\"name\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                <Form.Label column sm={2}>\r\n                  Email:\r\n                  {!!errors && errors.email && (\r\n                    <span className=\"errors\"> {errors.email} </span>\r\n                  )}\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group as={Row} controlId=\"formHorizontalPhone\">\r\n                <Form.Label column sm={2}>\r\n                  Phone:\r\n                  {!!errors && errors.phone && (\r\n                    <span className=\"errors\"> {errors.phone} </span>\r\n                  )}\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                  <Form.Control\r\n                    type=\"phone\"\r\n                    name=\"phone\"\r\n                    value={phone}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group as={Row} controlId=\"formHorizontalProviders\">\r\n                <Form.Label column sm={2}>\r\n                  Providers:\r\n                </Form.Label>\r\n                <Col sm={6}>\r\n                  <Form.Control\r\n                    type=\"providers\"\r\n                    name=\"providerInput\"\r\n                    value={providerInput}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </Col>\r\n                <Col sm={4}>\r\n                  <Button variant=\"light\" onClick={this.handleNewProvider}>\r\n                    Add Provider\r\n                  </Button>\r\n                </Col>\r\n              </Form.Group>\r\n              <fieldset>\r\n                <Form.Group as={Row}>\r\n                  <Form.Label column sm={2}></Form.Label>\r\n                  <Col sm={8}>\r\n                    <ProviderList\r\n                      providers={providers}\r\n                      deleteProvider={deleteProvider}\r\n                      saveEditedProvider={saveEditedProvider}\r\n                      onCheck={this.handleCheck}\r\n                      singleClientProviders={this.state.providers}\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n              </fieldset>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer className=\"edit-client-btns\">\r\n            <div>\r\n              <Button variant=\"danger\" onClick={this.confirmDelete}>\r\n                Delete Client\r\n              </Button>\r\n            </div>\r\n            <div>\r\n              <Button className=\"cancel-btn\" variant=\"light\" onClick={onClose}>\r\n                Cancel\r\n              </Button>\r\n              <Button variant=\"info\" onClick={this.saveChanges}>\r\n                Save Changes\r\n              </Button>\r\n            </div>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {showDeleteModal && (\r\n          <DeleteClientModal\r\n            confirmDelete={this.confirmDelete}\r\n            closeModals={this.closeModals}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nEditClient.propTypes = {\r\n  client: PropTypes.object.isRequired,\r\n  providers: PropTypes.array.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  deleteClient: PropTypes.func.isRequired,\r\n  addNewProvider: PropTypes.func.isRequired,\r\n  deleteProvider: PropTypes.func.isRequired,\r\n  saveEditedProvider: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EditClient;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Form,\r\n  Button,\r\n  FormControl,\r\n  NavDropdown,\r\n} from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst sortOptions = [\r\n  {\r\n    label: \"Reset\",\r\n    value: \"\",\r\n  },\r\n  {\r\n    label: \"A-Z\",\r\n    value: \"a-z\",\r\n  },\r\n  {\r\n    label: \"Z-A\",\r\n    value: \"z-a\",\r\n  },\r\n];\r\n\r\nfunction Search(props) {\r\n  const [sort, setSort] = useState({ label: \"\", value: \"\" });\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const handleSubmit = () => {\r\n    const data = {};\r\n    if (search) data.search = search;\r\n    if (sort.value) data.sort = sort.value;\r\n\r\n    props.getClients(data);\r\n  };\r\n  return (\r\n    <div className=\"search\">\r\n      <Navbar expand=\"lg\">\r\n        <Navbar.Brand>\r\n          <span style={{ color: \"#17a2b8\" }}>Sort and Filter:</span>\r\n        </Navbar.Brand>\r\n        <Navbar>\r\n          <Nav>\r\n            <NavDropdown title={sort.value ? sort.label : \"Sort\"}>\r\n              {sortOptions.map((item, index) => {\r\n                return (\r\n                  <NavDropdown.Item\r\n                    className=\"options\"\r\n                    key={index}\r\n                    onClick={() => setSort(item)}\r\n                    active={sort.value === item.value}>\r\n                    {item.label}\r\n                  </NavDropdown.Item>\r\n                );\r\n              })}\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar>\r\n      </Navbar>\r\n      <div className=\"sortNamv\">\r\n        <Form inline className=\"searchBtn\">\r\n          <FormControl\r\n            className=\"formControl\"\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            value={search}\r\n            onChange={(event) => setSearch(event.target.value)}\r\n          />\r\n          <Button\r\n            className=\"formButton\"\r\n            variant=\"outline-info\"\r\n            onClick={handleSubmit}>\r\n            Search\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearch.propTypes = {\r\n  getClients: PropTypes.func.isRequired,\r\n};\r\nexport default Search;\r\n","function request(url, method = \"GET\", body) {\r\n  const config = {\r\n    method: method,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  if (body) {\r\n    config.body = JSON.stringify(body);\r\n  }\r\n  return fetch(url, config)\r\n    .then((res) => res.json())\r\n    .then((response) => {\r\n      if (response.error) {\r\n        throw response.error;\r\n      }\r\n      return response;\r\n    });\r\n}\r\nexport default request;\r\n","import React, { PureComponent } from \"react\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport Loader from \"./Loader\";\r\nimport AddNewClient from \"./AddNewClient\";\r\nimport SingleClient from \"./SingleClient\";\r\nimport EditClient from \"./EditClient\";\r\nimport { checkData } from \"./../helpers/utils\";\r\nimport Search from \"./Search\";\r\nimport request from \"./../helpers/request\";\r\n\r\nconst apiUrl = process.env.REACT_APP_API_URL;\r\n\r\nclass ClientsList extends PureComponent {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    clients: [],\r\n    providers: [],\r\n    selectedProviders: new Set(),\r\n    newClientModal: false,\r\n    editClientModal: false,\r\n    editClient: null,\r\n    spinner: true,\r\n    errors: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getProviders();\r\n    this.getClients();\r\n  }\r\n\r\n  getProviders = () => {\r\n    const url = `${apiUrl}/provider`;\r\n    request(url)\r\n      .then((response) => {\r\n        this.setState({\r\n          providers: response,\r\n          spinner: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n\r\n  getClients = (data = {}) => {\r\n    let query = \"?\";\r\n\r\n    for (let key in data) {\r\n      let value = data[key];\r\n      query = `${query}${key}=${value}&`;\r\n    }\r\n    if (query === \"?\") {\r\n      query = \"\";\r\n    }\r\n    const url = `${apiUrl}/client${query}`;\r\n    request(url)\r\n      .then((response) => {\r\n        this.setState({\r\n          clients: response,\r\n          spinner: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error:\");\r\n      });\r\n  };\r\n\r\n  toggleAddNewClientModal = () => {\r\n    this.setState({\r\n      newClientModal: !this.state.newClientModal,\r\n    });\r\n  };\r\n\r\n  toggleEditClientModal = (client) => {\r\n    this.setState({\r\n      editClient: client,\r\n    });\r\n  };\r\n\r\n  makeSpinnerWork = () => {\r\n    this.setState({\r\n      spinner: true,\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleCheck = (id) => {\r\n    const selectedProviders = new Set(this.state.selectedProviders);\r\n    if (selectedProviders.has(id)) {\r\n      selectedProviders.delete(id);\r\n    } else {\r\n      selectedProviders.add(id);\r\n    }\r\n    this.setState({\r\n      selectedProviders,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { name, email, phone, selectedProviders, clients } = this.state;\r\n    let providers = [...selectedProviders];\r\n    let errors = checkData(name, email, phone, clients);\r\n    if (Object.values(errors).length > 0) {\r\n      return this.setState({\r\n        errors,\r\n      });\r\n    } else {\r\n      this.makeSpinnerWork();\r\n      const client = {\r\n        name,\r\n        email,\r\n        phone,\r\n        providers,\r\n      };\r\n      const url = \"http://localhost:3001/client\";\r\n\r\n      const body = client;\r\n\r\n      request(url, \"POST\", body)\r\n        .then((response) => {\r\n          const newClient = response;\r\n          this.setState({\r\n            clients: [newClient, ...this.state.clients],\r\n            newClientModal: false,\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            selectedProviders: new Set(),\r\n            errors: null,\r\n          });\r\n        })\r\n        .then(() => this.getClients())\r\n        .catch((error) => {});\r\n    }\r\n  };\r\n\r\n  addProvider = (name) => {\r\n    const { providers } = this.state;\r\n    const found = providers.some((el) => el.name === name);\r\n    if (!found) {\r\n      const url = `${apiUrl}/provider`;\r\n      const body = { name };\r\n      request(url, \"POST\", body)\r\n        .then((response) => {\r\n          const newProvider = response;\r\n          this.setState({\r\n            providers: [...this.state.providers, newProvider],\r\n          });\r\n        })\r\n        .catch((error) => {});\r\n    }\r\n  };\r\n\r\n  saveEditedProvider = (editedProvider) => {\r\n    const url = `${apiUrl}/provider/${editedProvider._id}`;\r\n    const body = editedProvider;\r\n    request(url, \"PUT\", body)\r\n      .then((response) => {\r\n        const newProviders = [...this.state.providers];\r\n        const editedProviderIndex = this.state.providers.findIndex(\r\n          (provider) => provider._id === editedProvider._id\r\n        );\r\n        newProviders[editedProviderIndex] = response;\r\n        this.setState({\r\n          providers: newProviders,\r\n        });\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  saveEditedClient = (editedClient) => {\r\n    this.makeSpinnerWork();\r\n    const url = `${apiUrl}/client/${editedClient._id}`;\r\n    const body = editedClient;\r\n    request(url, \"PUT\", body)\r\n      .then((response) => {\r\n        const newClients = [...this.state.clients];\r\n        const editedClientIndex = this.state.clients.findIndex(\r\n          (client) => client._id === editedClient._id\r\n        );\r\n        newClients[editedClientIndex] = response;\r\n        this.setState({\r\n          clients: newClients,\r\n          errors: null,\r\n        });\r\n      })\r\n      .then(() => {\r\n        this.getClients();\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  deleteProvider = (id) => {\r\n    const url = `${apiUrl}/provider/${id}`;\r\n    request(url, \"DELETE\")\r\n      .then(() => {\r\n        const newProviders = this.state.providers.filter(\r\n          (provider) => provider._id !== id\r\n        );\r\n        this.setState({\r\n          providers: newProviders,\r\n        });\r\n      })\r\n      .catch((error) => {});\r\n    this.getClients();\r\n  };\r\n\r\n  deleteClient = (id) => {\r\n    const url = `${apiUrl}/client/${id}`;\r\n    request(url, \"DELETE\")\r\n      .then(() => {\r\n        const newClientList = this.state.clients.filter(\r\n          (client) => client._id !== id\r\n        );\r\n        this.setState({\r\n          clients: newClientList,\r\n        });\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  render() {\r\n    const { clients, spinner } = this.state;\r\n    const clientList = clients.map((el) => {\r\n      return (\r\n        <SingleClient\r\n          key={el._id}\r\n          id={el._id}\r\n          newClient={el}\r\n          showEditModal={this.toggleEditClientModal}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"app\">\r\n        <div>\r\n          {clients.length > 0 && <Search getClients={this.getClients} />}\r\n        </div>\r\n        <div className=\"table-wrapper\">\r\n          <div className=\"client-list\">\r\n            <Button variant=\"custom\" onClick={this.getClients}>\r\n              <h3>Clients</h3>\r\n            </Button>\r\n            <Button variant=\"info\" onClick={this.toggleAddNewClientModal}>\r\n              New Client\r\n            </Button>\r\n          </div>\r\n          <Table bordered hover responsive=\"sm\" variant=\"light\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Phone</th>\r\n                <th>Providers</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            {spinner ? (\r\n              <tbody className=\"loader\">\r\n                <tr>\r\n                  <td>\r\n                    <Loader />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            ) : (\r\n              <tbody>{clientList}</tbody>\r\n            )}\r\n          </Table>\r\n        </div>\r\n        {this.state.newClientModal && (\r\n          <AddNewClient\r\n            providers={this.state.providers}\r\n            selectedProviders={this.state.selectedProviders}\r\n            onClose={this.toggleAddNewClientModal}\r\n            addNewProvider={this.addProvider}\r\n            deleteProvider={this.deleteProvider}\r\n            saveEditedProvider={this.saveEditedProvider}\r\n            handleNewClientInfo={this.handleClick}\r\n            handleChangeNewClientInfo={this.handleChange}\r\n            onCheck={this.handleCheck}\r\n            errors={this.state.errors}\r\n          />\r\n        )}\r\n        {!!this.state.editClient && (\r\n          <EditClient\r\n            client={this.state.editClient}\r\n            providers={this.state.providers}\r\n            onClose={() => this.toggleEditClientModal(null)}\r\n            deleteClient={this.deleteClient}\r\n            addNewProvider={this.addProvider}\r\n            deleteProvider={this.deleteProvider}\r\n            saveEditedProvider={this.saveEditedProvider}\r\n            saveEditedClient={this.saveEditedClient}\r\n            onCheck={this.handleCheck}\r\n            clients={this.state.clients}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClientsList;\r\n","export default __webpack_public_path__ + \"static/media/error.0f3da28f.jpeg\";","import React from \"react\";\r\nimport error from \"./../images/error.jpeg\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"error\">\r\n      <Link to=\"/\">\r\n        <img src={error} style={{ cursor: \"pointer\" }} alt=\"Error page\" />\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import \"./App.css\";\r\nimport ClientsList from \"./components/ClientsList\";\r\nimport NotFound from \"./components/NotFound\";\r\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={ClientsList} />\r\n          <Route path=\"/404\" exact component={NotFound} />\r\n          <Redirect to=\"/404\" />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}